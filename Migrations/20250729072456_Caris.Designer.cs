// <auto-generated />
using System;
using DepoStok.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DepoStok.Migrations
{
    [DbContext(typeof(StokDbContext))]
    [Migration("20250729072456_Caris")]
    partial class Caris
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DepoStok.Models.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdSoyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DepoStok.Models.cari", b =>
                {
                    b.Property<int>("carId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carId"));

                    b.Property<string>("adres")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("telefon")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("unvan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("vergiDairesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vergiNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("carId");

                    b.ToTable("cariler");
                });

            modelBuilder.Entity("DepoStok.Models.depo", b =>
                {
                    b.Property<int>("depoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("depoId"));

                    b.Property<string>("aciklama")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("depoAd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("konumBilgisi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rafBilgisi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("depoId");

                    b.ToTable("depolar");
                });

            modelBuilder.Entity("DepoStok.Models.depoTransfer", b =>
                {
                    b.Property<int>("transferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transferId"));

                    b.Property<string>("aciklama")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("hedefDepoId")
                        .HasColumnType("int");

                    b.Property<int>("kaynakDepoId")
                        .HasColumnType("int");

                    b.Property<string>("seriNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("transferNo")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("transferTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("transferId");

                    b.HasIndex("hedefDepoId");

                    b.HasIndex("kaynakDepoId");

                    b.ToTable("depoTransferleri");
                });

            modelBuilder.Entity("DepoStok.Models.depoTransferDetay", b =>
                {
                    b.Property<int>("detayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("detayId"));

                    b.Property<int>("malzemeId")
                        .HasColumnType("int");

                    b.Property<decimal>("miktar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("transferId")
                        .HasColumnType("int");

                    b.HasKey("detayId");

                    b.HasIndex("malzemeId");

                    b.HasIndex("transferId");

                    b.ToTable("depoTransferDetaylari");
                });

            modelBuilder.Entity("DepoStok.Models.irsaliye", b =>
                {
                    b.Property<int>("irsaliyeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("irsaliyeId"));

                    b.Property<string>("aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.Property<int>("depoId")
                        .HasColumnType("int");

                    b.Property<bool>("durum")
                        .HasColumnType("bit");

                    b.Property<string>("irsaliyeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("irsaliyeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("irsaliyeTipi")
                        .HasColumnType("int");

                    b.Property<decimal>("toplamTutar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("transferId")
                        .HasColumnType("int");

                    b.HasKey("irsaliyeId");

                    b.HasIndex("carId");

                    b.HasIndex("depoId");

                    b.HasIndex("transferId");

                    b.ToTable("irsaliyeler");
                });

            modelBuilder.Entity("DepoStok.Models.irsaliyeDetay", b =>
                {
                    b.Property<int>("detayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("detayId"));

                    b.Property<decimal>("araToplam")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("birimFiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("irsaliyeId")
                        .HasColumnType("int");

                    b.Property<int>("malzemeId")
                        .HasColumnType("int");

                    b.Property<decimal>("miktar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("seriNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("detayId");

                    b.HasIndex("irsaliyeId");

                    b.HasIndex("malzemeId");

                    b.ToTable("irsaliyeDetaylari");
                });

            modelBuilder.Entity("DepoStok.Models.logTakip", b =>
                {
                    b.Property<int>("islemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("islemId"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("detay")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("islemTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("islemTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tabloAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("islemId");

                    b.HasIndex("AppUserId");

                    b.ToTable("logTakipler");
                });

            modelBuilder.Entity("DepoStok.Models.malzeme", b =>
                {
                    b.Property<int>("malzemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("malzemeId"));

                    b.Property<string>("aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("aktifPasif")
                        .HasColumnType("bit");

                    b.Property<string>("barkodNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("birim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kategori")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("malzemeAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("minStokMiktar")
                        .HasColumnType("int");

                    b.HasKey("malzemeId");

                    b.ToTable("malzemeler");
                });

            modelBuilder.Entity("DepoStok.Models.stok", b =>
                {
                    b.Property<int>("HareketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HareketId"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HareketTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("HareketTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MalzemeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Miktar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReferansId")
                        .HasColumnType("int");

                    b.Property<string>("SeriNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.HasKey("HareketId");

                    b.HasIndex("DepoId");

                    b.HasIndex("MalzemeId");

                    b.HasIndex("carId");

                    b.ToTable("stoklar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DepoStok.Models.depoTransfer", b =>
                {
                    b.HasOne("DepoStok.Models.depo", "hedefDepo")
                        .WithMany()
                        .HasForeignKey("hedefDepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.depo", "kaynakDepo")
                        .WithMany()
                        .HasForeignKey("kaynakDepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("hedefDepo");

                    b.Navigation("kaynakDepo");
                });

            modelBuilder.Entity("DepoStok.Models.depoTransferDetay", b =>
                {
                    b.HasOne("DepoStok.Models.malzeme", "malzeme")
                        .WithMany()
                        .HasForeignKey("malzemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.depoTransfer", "depoTransfer")
                        .WithMany("depoTransferDetaylari")
                        .HasForeignKey("transferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("depoTransfer");

                    b.Navigation("malzeme");
                });

            modelBuilder.Entity("DepoStok.Models.irsaliye", b =>
                {
                    b.HasOne("DepoStok.Models.cari", "cari")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.depo", "depo")
                        .WithMany()
                        .HasForeignKey("depoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.depoTransfer", "depoTransfer")
                        .WithMany()
                        .HasForeignKey("transferId");

                    b.Navigation("cari");

                    b.Navigation("depo");

                    b.Navigation("depoTransfer");
                });

            modelBuilder.Entity("DepoStok.Models.irsaliyeDetay", b =>
                {
                    b.HasOne("DepoStok.Models.irsaliye", "irsaliye")
                        .WithMany("irsaliyeDetaylari")
                        .HasForeignKey("irsaliyeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.malzeme", "malzeme")
                        .WithMany()
                        .HasForeignKey("malzemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("irsaliye");

                    b.Navigation("malzeme");
                });

            modelBuilder.Entity("DepoStok.Models.logTakip", b =>
                {
                    b.HasOne("DepoStok.Models.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DepoStok.Models.stok", b =>
                {
                    b.HasOne("DepoStok.Models.depo", "Depo")
                        .WithMany()
                        .HasForeignKey("DepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.malzeme", "Malzeme")
                        .WithMany()
                        .HasForeignKey("MalzemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.cari", "cari")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Depo");

                    b.Navigation("Malzeme");

                    b.Navigation("cari");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DepoStok.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DepoStok.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoStok.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DepoStok.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepoStok.Models.depoTransfer", b =>
                {
                    b.Navigation("depoTransferDetaylari");
                });

            modelBuilder.Entity("DepoStok.Models.irsaliye", b =>
                {
                    b.Navigation("irsaliyeDetaylari");
                });
#pragma warning restore 612, 618
        }
    }
}
